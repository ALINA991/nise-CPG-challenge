
#define DISCRIPTION_LENGTH     15
#define NOMBER_M_NEURONS     3
unsigned long int myTime;
unsigned int mydelay = 10; // ms -> this is the interval
/******************************************************/ 
/* Rowat P.F., Selverston, A.I., 
 *  Oscillatory Mechanisms in Pairs of Neurons Connected 
 *  with Fast Inhibitory Synapses, Journal of Computationa 
 *  Neuroscience, 1997. 
 */
/******************************************************/ 
//struct Mneuron 
/******************************************************/ 
struct Mneuron { 
   char discription[DISCRIPTION_LENGTH]; // name 
   double tao   = 0;  
   double T     = 0; 
   double b     = 0; 
  double x_0    = 0;
  double xh_0   = 0;
  double x      = x_0; 
  double xh     = xh_0;
  double y      = 0;
  // double theta = 0; 
  double inj_cur = 0; 
  // double inj_cur_MultiplicationFactor = 1; 
   
} m_neuron[NOMBER_M_NEURONS]; 

// /******************************************************/ 
// //struct Pattern 
// /******************************************************/ 
struct Pattern{
  double tao;
  double T;
  double b;
  // double InjCurrentMultiplicationFactor;
  };
/******************************************************/ 

Pattern CASE_1 = {1,12,0};
Pattern CASE_2 = {1,12,2.5};
Pattern CASE_3 = {1,120000000000000000,25000000000000000};

// ===========================================
// Matsuoka model: mutual inhibition
//(1)... tao * dx/dt = -x - b*xh + i_inj
//(2)... T * dxh/dt = -xh + y
//(3)... y = max(x, theta)
//(4)... squre(T - tao) >= 4*T*t*b

// Here diff_x ≡ dx/dt
// Here diff_xh ≡ dxh/dt
// ===========================================

/******************************************************/ 
inline double diff_x (double x , double xh , double tao, double b , double inj_cur)
{ return (double)(-1/tao)*( x + b*xh - inj_cur) ; } 

/******************************************************/ 
inline double  diff_xh (double x , double xh,  double T, double y)
 { return (double)(-1/T)*(xh - y); } 
//  default theta =0; y = max(x, theta) = x
// { return (double)(-1/T)*(xh + max(x, theta)); } 
/******************************************************/ 

inline double y_max (double x) {
    return (x > 0 ) ? x : 0;
}

/******************************************************/ 
// Runge-Kutta 4th Order Method
/******************************************************/ 
void update_M_neuron(struct Mneuron* m_n)
{
int n = 20; 
//double x0 = t-ts;
//double xf = t;
double h; 
//h = (xf-x0)/(double)n;
h= ((double)mydelay/1000)/n;
double ya[n],yb[n],y[n]; 
double k1,k2,k3,k4,k, l1,l2,l3,l4,l;  

ya[0] = m_n->x;
yb[0] = m_n->xh;
y[0] = m_n->y;

for (int i=0; i<n-1 ; i++){
  k1 = h*diff_x(ya[i], yb[i], m_n->tao, m_n->b, m_n->inj_cur);
  l1 = h*diff_xh(ya[i], yb[i], m_n->T, m_n->y);

  k2 = h*diff_x(ya[i]+k1/2, yb[i]+l1/2, m_n->tao, m_n->b, m_n->inj_cur);
  l2 = h*diff_xh(ya[i]+k1/2, yb[i]+l1/2, m_n->T, m_n->y);

  k3 = h*diff_x(ya[i]+k2/2, yb[i]+l2/2,m_n->tao, m_n->b, m_n->inj_cur);
  l3 = h*diff_xh(ya[i]+k2/2, yb[i]+l2/2, m_n->T, m_n->y);

  k4 = h*diff_x(ya[i]+k3, yb[i]+l3, m_n->tao, m_n->b, m_n->inj_cur);
  l4 = h*diff_xh(ya[i]+k3, yb[i]+l3, m_n->T, m_n->y);    
  
  k = 1/6.0 * (k1 + 2*k2 + 2*k3 + k4);
  l  = 1/6.0 * (l1 + 2*l2  + 2*l3  + l4);
  // Serial.print((-1/m_n->tao)*(ya[i] + m_n->b*yb[i] - m_n->inj_cur*m_n->inj_cur_MultiplicationFactor));
 
  ya[i+1]= ya[i]+k;
  yb[i+1]= yb[i]+l;
  y[i+1]= y_max(ya[i]);
} 
m_n->x = ya[n-1]; 
m_n->xh = yb[n-1]; 
m_n->y = y[n-1]; 

return; 
}


/******************************************************/ 
void setup_M_neurons(struct Mneuron* m_n,struct Pattern myP, String str)
{
for(int i=0 ; i<(sizeof(str) / sizeof(str[0])) ; i++) 
     m_n->discription[i] = str[i]; 

m_n->tao = myP.tao; 
m_n->T = myP.T;
m_n->b = myP.b;
// m_n->inj_cur_MultiplicationFactor = myP.InjCurrentMultiplicationFactor;

}
/******************************************************/ 
void update_locomotion_network(void)
{
for (int i = 0; i< NOMBER_M_NEURONS ; i++)
  update_M_neuron(&m_neuron[i]);
}
/******************************************************/ 
/* put your setup code in setup(), to run once */
void setup() {
Serial.begin(115200);

/* set the configuration of the RS neuron to match a desired output: OSCILLATORY, QUIESCENT, PLATEAU, ALMOSTOSC */
/******************************************************/ 
setup_M_neurons(&m_neuron[0],CASE_1,"Fist neuron");
setup_M_neurons(&m_neuron[1],CASE_2,"Second neuron");
setup_M_neurons(&m_neuron[2],CASE_3,"Third neuron");
}
/******************************************************/ 
/* put your main code here in loop(), to run repeatedly */

void loop() {
/* Read my program running time in milliseconds */
myTime = millis();

/* After 5 seconds, inject a current in the first neuron for a duration of 0.01 second*/
// OSCILLATORY
m_neuron[0].inj_cur = 0;
m_neuron[1].inj_cur = 0;
m_neuron[2].inj_cur = 0;

if((myTime>5000)&&(myTime<40000)){
  m_neuron[0].inj_cur = 1;
  m_neuron[1].inj_cur = 1;
  m_neuron[2].inj_cur = 1;
}


/* Update the neurons output*/
update_locomotion_network();

/* Printing the output of the neurons on serial port*/
for (int i = 0; i< NOMBER_M_NEURONS ; i++)
{Serial.print(m_neuron[i].y);Serial.print(" ");}
Serial.print("\n");

/* delay at the end */
delay(mydelay);

}